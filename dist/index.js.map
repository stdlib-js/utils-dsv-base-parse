{
  "version": 3,
  "sources": ["../lib/defaults.js", "../lib/states/enum2state.json", "../lib/states/state2enum.js", "../lib/states/closed.js", "../lib/states/comment.js", "../lib/states/error.js", "../lib/states/max.js", "../lib/states/escape.js", "../lib/states/field.js", "../lib/states/init.js", "../lib/states/invalid_quote_end.js", "../lib/states/quote_end.js", "../lib/states/quoted_escape.js", "../lib/states/quoted_field.js", "../lib/states/skip.js", "../lib/states/skipped_comment.js", "../lib/states/skipped_escape.js", "../lib/states/skipped_field.js", "../lib/states/skipped_invalid_quote_end.js", "../lib/states/skipped_quote_end.js", "../lib/states/skipped_quoted_escape.js", "../lib/states/skipped_quoted_field.js", "../lib/states/index.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar noop = require( '@stdlib/utils-noop' );\n\n\n// FUNCTIONS //\n\n/**\n* Throws a provided exception.\n*\n* @private\n* @param {Error} err - error object\n* @throws {Error} exception\n*/\nfunction throwError( err ) {\n\tthrow err;\n}\n\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t// Character sequence appearing at the beginning of a row which demarcates that the row content should be parsed as a commented line. A commented line ends upon encountering the first newline character sequence, regardless of whether that newline character sequence is preceded by an escape character sequence.\n\t\t'comment': '',\n\n\t\t// Character sequence separating record fields (e.g., use `','` for CSV and use `'\\t'` for TSV).\n\t\t'delimiter': ',',\n\n\t\t// Flag indicating how quote sequences should be escaped within a quoted field. When `true`, a quote sequence must be escaped by another quote sequence. When `false`, a quote sequence must be escaped by the escape sequence.\n\t\t'doublequote': true,\n\n\t\t// Character sequence for escaping character sequences having special meaning (i.e., delimiter, newline, escape, and comment outside of quoted fields, and the quote sequence within quoted fields when `doublequote` is `false`).\n\t\t'escape': '',\n\n\t\t// Flag indicating whether to trim leading whitespace from field values. If `false`, leading whitespace is not trimmed (e.g., `a, b, c` parses as `[ 'a', ' b', ' c' ]`). If `true`, leading whitespace is trimmed (e.g., `a, b, c` parses as `[ 'a', 'b', 'c' ]`).\n\t\t'ltrim': false,\n\n\t\t// Maximum number of records to process.\n\t\t'maxRows': 1e308,\n\n\t\t// Character sequence separating rows.\n\t\t'newline': '\\r\\n',\n\n\t\t// Callback to be invoked upon closing the parser.\n\t\t'onClose': noop,\n\n\t\t// Callback to be invoked upon processing a field.\n\t\t'onColumn': noop,\n\n\t\t// Callback to be invoked upon processing a commented line.\n\t\t'onComment': null,\n\n\t\t// Callback to be invoked upon encountering an unrecoverable parse error.\n\t\t'onError': throwError,\n\n\t\t// Callback to be invoked upon processing a record.\n\t\t'onRow': noop,\n\n\t\t// Callback to be invoked upon skipping a line.\n\t\t'onSkip': null,\n\n\t\t// When `strict` is `false`, a callback to be invoked upon encountering invalid DSV.\n\t\t'onWarn': null,\n\n\t\t// Character sequence demarcating the beginning and ending of a quoted field.\n\t\t'quote': '\"',\n\n\t\t// Flag indicating whether to enable special processing of quote character sequences (i.e., whether a quote sequence should demarcate a quoted field).\n\t\t'quoting': true,\n\n\t\t// Array-like object for storing the field values of the most recently processed record. This allows reusing memory and avoiding copies upon invocation of the `onRow` callback.\n\t\t'rowBuffer': [],\n\n\t\t// Flag indicating whether to trim trailing whitespace from field values. If `false`, trailing whitespace is not trimmed (e.g., `a ,b , c` parses as `[ 'a ', 'b ', ' c' ]`). If `true`, trailing whitespace is trimmed (e.g., `a ,b ,c` parses as `[ 'a', 'b', 'c' ]`).\n\t\t'rtrim': false,\n\n\t\t// Character sequence appearing at the beginning of a row which demarcates that the row content should be skipped.\n\t\t'skip': '',\n\n\t\t// Flag indicating whether to skip over rows which are either empty or containing only whitespace.\n\t\t'skipBlankRows': false,\n\n\t\t// Callback whose return value indicates whether to skip over a row.\n\t\t'skipRow': null,\n\n\t\t// Flag indicating whether to raise an exception upon encountering invalid DSV.\n\t\t'strict': true,\n\n\t\t// Flag indicating whether to trim leading whitespace in commented lines.\n\t\t'trimComment': true,\n\n\t\t// List of characters to be treated as whitespace.\n\t\t'whitespace': [ ' ' ]\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n", "[\n  \"closed\",\n  \"comment\",\n  \"escape\",\n  \"error\",\n  \"field\",\n  \"init\",\n  \"invalid_quote_end\",\n  \"quote_end\",\n  \"quoted_escape\",\n  \"quoted_field\",\n  \"skip\",\n  \"skipped_comment\",\n  \"skipped_escape\",\n  \"skipped_field\",\n  \"skipped_invalid_quote_end\",\n  \"skipped_quote_end\",\n  \"skipped_quoted_escape\",\n  \"skipped_quoted_field\"\n]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar enum2state = require( './enum2state.json' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns a table mapping state names to enumeration constants.\n*\n* @private\n* @returns {Object} mapping table\n*/\nfunction table() {\n\tvar out;\n\tvar i;\n\n\tout = {};\n\tfor ( i = 0; i < enum2state.length; i++ ) {\n\t\tout[ enum2state[ i ] ] = i;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Table mapping state names to enumeration constants.\n*\n* @private\n* @name state2enum\n* @type {Object}\n*/\nvar state2enum = table(); // eslint-disable-line vars-on-top\n\n\n// EXPORTS //\n\nmodule.exports = state2enum;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\n// Possible transition states...\nvar CLOSED = state2enum[ 'closed' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for closing a parser.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next() {\n\t\tparser._changeState( CLOSED );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:comment' );\n\n// Possible transition states...\nvar INIT = state2enum[ 'init' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing a commented line.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar newlineLastIndex;\n\tvar newline;\n\n\tnewlineLastIndex = parser._newlineLastIndex;\n\tnewline = parser._newline;\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tdebug( 'Char: %s', ch );\n\n\t\t// Check for the end of the commented line...\n\t\tif (\n\t\t\tch === newline[ newlineLastIndex ] &&\n\t\t\tparser._scan( newline, newlineLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the newline character sequence:\n\t\t\tdebug( 'Newline.' );\n\t\t\tparser._rewind( newlineLastIndex )._changeState( INIT );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\n// Possible transition states...\nvar ERROR = state2enum[ 'error' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for a parser error state.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next() {\n\t\tparser._changeState( ERROR );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @private\n* @param {NonNegativeInteger} x - first value\n* @param {NonNegativeInteger} y - second value\n* @returns {NonNegativeInteger} maximum value\n*\n* @example\n* var v = max( 2, 3 );\n* // returns 3\n*\n* @example\n* var v = max( 3, 2 );\n* // returns 3\n*\n* @example\n* var v = max( 2, 2 );\n* // returns 2\n*/\nfunction max( x, y ) {\n\treturn ( x < y ) ? y : x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = max;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar maximum = require( './max.js' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:escape' );\n\n// Possible transition states...\nvar ERROR = state2enum[ 'error' ];\nvar FIELD = state2enum[ 'field' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing an escape sequence.\n*\n* ## Notes\n*\n* -   An escape sequence escapes the delimiter, newline, and escape sequences in **non-quoted** fields.\n* -   An escape sequence escapes comment and skip sequences in **non-quoted** fields when an escape sequence occurs at the beginning of a record.\n* -   In strict mode, if not immediately followed by a special character sequence, then the parser raises an exception.\n* -   In non-strict mode, if not immediately followed by a special character sequence, then the escape sequence has no special meaning and is considered a normal character sequence.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar delimiterLastIndex;\n\tvar newlineLastIndex;\n\tvar commentLastIndex;\n\tvar escapeLastIndex;\n\tvar skipLastIndex;\n\tvar escapeLength;\n\tvar delimiter;\n\tvar newline;\n\tvar comment;\n\tvar escape;\n\tvar strict;\n\tvar skip;\n\tvar max;\n\n\tdelimiterLastIndex = parser._delimiterLastIndex;\n\tdelimiter = parser._delimiter;\n\n\tnewlineLastIndex = parser._newlineLastIndex;\n\tnewline = parser._newline;\n\n\tcommentLastIndex = parser._commentLastIndex;\n\tcomment = parser._comment;\n\n\tskipLastIndex = parser._skipLastIndex;\n\tskip = parser._skip;\n\n\tescapeLastIndex = parser._escapeLastIndex;\n\tescapeLength = parser._escapeLength;\n\tescape = parser._escape;\n\n\tstrict = parser._strict;\n\n\tmax = maximum( maximum( delimiterLastIndex, newlineLastIndex ), escapeLastIndex ); // eslint-disable-line max-len\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tvar cursor = parser._cursor;\n\t\tvar idx = parser._eidx; // position of last escape character\n\t\tvar d = cursor - idx;\n\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for a field delimiter.\n\t\t*/\n\t\tif (\n\t\t\td === delimiterLastIndex &&\n\t\t\tch === delimiter[ delimiterLastIndex ] &&\n\t\t\tparser._scan( delimiter, delimiterLastIndex )\n\t\t) {\n\t\t\tdebug( 'Delimiter.' );\n\t\t\tparser._copyWithin( idx-escapeLastIndex, idx+1, delimiterLastIndex )\n\t\t\t\t._rewind( escapeLength )\n\t\t\t\t._push( ch )\n\t\t\t\t._changeState( FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a row separator.\n\t\t*/\n\t\tif (\n\t\t\td === newlineLastIndex &&\n\t\t\tch === newline[ newlineLastIndex ] &&\n\t\t\tparser._scan( newline, newlineLastIndex )\n\t\t) {\n\t\t\tdebug( 'Newline.' );\n\t\t\tparser._copyWithin( idx-escapeLastIndex, idx+1, newlineLastIndex )\n\t\t\t\t._rewind( escapeLength )\n\t\t\t\t._push( ch )\n\t\t\t\t._changeState( FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for an escape sequence.\n\t\t*/\n\t\tif (\n\t\t\td === escapeLastIndex &&\n\t\t\tch === escape[ escapeLastIndex ] &&\n\t\t\tparser._scan( escape, escapeLastIndex )\n\t\t) {\n\t\t\tdebug( 'Escape.' );\n\t\t\tparser._copyWithin( idx-escapeLastIndex, idx+1, escapeLastIndex )\n\t\t\t\t._rewind( escapeLength )\n\t\t\t\t._push( ch )\n\t\t\t\t._changeState( FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a comment sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   Comment sequences only have special meaning when appearing at the beginning of a row.\n\t\t*/\n\t\tif (\n\t\t\tcomment &&                                 // user specified a comment character sequence, so should check for comments\n\t\t\tcursor-commentLastIndex === 0 &&           // only search the first character(s) of the row\n\t\t\tch === comment[ commentLastIndex ] &&      // we have a potential match\n\t\t\tparser._scan( comment, commentLastIndex )  // we found a match\n\t\t) {\n\t\t\tdebug( 'Comment.' );\n\t\t\tparser._copyWithin( idx-commentLastIndex, idx+1, commentLastIndex )\n\t\t\t\t._rewind( escapeLength )\n\t\t\t\t._push( ch )\n\t\t\t\t._changeState( FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a skip sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   Skip sequences only have special meaning when appearing at the beginning of a row.\n\t\t*/\n\t\tif (\n\t\t\tskip &&                                 // user specified a skip character sequence, so should check for a skipped line\n\t\t\tcursor-skipLastIndex === 0 &&           // only search the first character(s) of the row\n\t\t\tch === skip[ skipLastIndex ] &&         // we have a potential match\n\t\t\tparser._scan( skip, skipLastIndex )     // we found a match\n\t\t) {\n\t\t\tdebug( 'Skip.' );\n\t\t\tparser._copyWithin( idx-skipLastIndex, idx+1, skipLastIndex )\n\t\t\t\t._rewind( escapeLength )\n\t\t\t\t._push( ch )\n\t\t\t\t._changeState( FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a non-special character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   In strict mode, field separators, row separators, and escaped sequences must immediately follow an escape sequence. At some point, we'll have processed a greater number of characters than exists in any of the special character sequences, meaning that none of those sequences immediately follow the escape sequence which led to the current state. Once this happens, we're in an invalid state and must raise an exception, as not clear how the parser should interpret the preceding values (e.g., was the preceding escape sequence supposed to be escaped? was the preceding escape sequence a mistake and should be ignored? are we missing a delimiter or newline sequence? etc.).\n\t\t* -   In non-strict mode, we assume that the escape sequence is a normal character sequence.\n\t\t*/\n\t\tif ( d >= max ) {\n\t\t\tif ( strict ) {\n\t\t\t\tdebug( 'Error.' );\n\t\t\t\tparser._setErrorState( 'INVALID_ESCAPE' )._changeState( ERROR );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Return to normal field processing:\n\t\t\tdebug( 'Escape sequence is not followed by a special character sequence.' );\n\t\t\tparser._raiseWarning( 'INVALID_ESCAPE' )._push( ch )._changeState( FIELD );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:field' );\n\n// Possible transition states...\nvar ESCAPE = state2enum[ 'escape' ];\nvar FIELD = state2enum[ 'field' ];\nvar INIT = state2enum[ 'init' ];\nvar QUOTED_FIELD = state2enum[ 'quoted_field' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing a field.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar delimiterLastIndex;\n\tvar newlineLastIndex;\n\tvar escapeLastIndex;\n\tvar quoteLastIndex;\n\tvar delimiter;\n\tvar newline;\n\tvar quoting;\n\tvar escape;\n\tvar strict;\n\tvar quote;\n\n\tescapeLastIndex = parser._escapeLastIndex;\n\tescape = parser._escape;\n\n\tquoteLastIndex = parser._quoteLastIndex;\n\tquote = parser._quote;\n\n\tdelimiterLastIndex = parser._delimiterLastIndex;\n\tdelimiter = parser._delimiter;\n\n\tnewlineLastIndex = parser._newlineLastIndex;\n\tnewline = parser._newline;\n\n\tquoting = parser._quoting;\n\tstrict = parser._strict;\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tvar idx = parser._cursor - parser._cidx + 1;\n\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for an escape character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   An escape sequence escapes the delimiter, newline, and escape sequences in **non-quoted** fields.\n\t\t* -   When `doublequote` is `false`, the escape sequence escapes quote sequences within **quoted** fields.\n\t\t* -   In strict mode, if not immediately followed by a special character sequence, then the parser raises an exception.\n\t\t* -   In non-strict mode, if not immediately followed by a special character sequence, then the escape sequence has no special meaning.\n\t\t*/\n\t\tif (\n\t\t\tch === escape[ escapeLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( escape, escapeLastIndex ) // we found a match\n\t\t) {\n\t\t\tdebug( 'Escape.' );\n\t\t\tparser._push( ch )._changeState( ESCAPE );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a quote character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   When `quoting` is `true`, in order for a field to be quoted, the quote sequence must be the first character(s) of the field.\n\t\t* -   When `quoting` is `false`, quote sequences do **not** have any special meaning, and we process quote sequences as normal field text.\n\t\t*/\n\t\tif (\n\t\t\tidx-quoteLastIndex === 0 &&           // only search the first character(s) of the field\n\t\t\tch === quote[ quoteLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( quote, quoteLastIndex ) // we found a match\n\t\t) {\n\t\t\tif ( quoting ) {\n\t\t\t\t// Rewind the cursor to point to the last character before the quote character sequence:\n\t\t\t\tdebug( 'Quote.' );\n\t\t\t\tparser._rewind( quoteLastIndex )._changeState( QUOTED_FIELD );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Continue processing until we can transition to a new state:\n\t\t\tparser._push( ch );\n\t\t\treturn;\n\t\t}\n\t\t/**\n\t\t* Check for a quote character sequence (non-strict mode).\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   In non-strict mode, a quote character sequence is allowed to start after whitespace (e.g., `a,  \"b\",  c`).\n\t\t* -   When `quoting` is `true`, in order for a field to be quoted, the quote sequence must be the first character(s) of the field.\n\t\t* -   When `quoting` is `false`, quote sequences do **not** have any special meaning, and we process quote sequences as normal field text.\n\t\t*/\n\t\tif (\n\t\t\tstrict === false &&                   // non-strict mode\n\t\t\tch === quote[ quoteLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( quote, quoteLastIndex ) // we found a match\n\t\t) {\n\t\t\tif ( quoting && parser._isWhitespace( parser._cidx, parser._cursor-quoteLastIndex ) ) {\n\t\t\t\t// Rewind the cursor to point to the last character of the preceding field:\n\t\t\t\tdebug( 'Quote.' );\n\t\t\t\tparser._raiseWarning( 'INVALID_OPENING_QUOTE' )\n\t\t\t\t\t._rewind( idx )\n\t\t\t\t\t._changeState( QUOTED_FIELD );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Continue processing until we can transition to a new state:\n\t\t\tparser._push( ch );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a field delimiter.\n\t\t*/\n\t\tif (\n\t\t\tch === delimiter[ delimiterLastIndex ] &&\n\t\t\tparser._scan( delimiter, delimiterLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the delimiter character sequence:\n\t\t\tdebug( 'Delimiter.' );\n\t\t\tparser._rewind( delimiterLastIndex )._changeState( FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a row separator.\n\t\t*/\n\t\tif (\n\t\t\tch === newline[ newlineLastIndex ] &&\n\t\t\tparser._scan( newline, newlineLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the newline character sequence:\n\t\t\tdebug( 'Newline.' );\n\t\t\tparser._rewind( newlineLastIndex )._changeState( INIT );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:init' );\n\n// Possible transition states...\nvar COMMENT = state2enum[ 'comment' ];\nvar FIELD = state2enum[ 'field' ];\nvar ESCAPE = state2enum[ 'escape' ];\nvar INIT = state2enum[ 'init' ];\nvar QUOTED_FIELD = state2enum[ 'quoted_field' ];\nvar SKIP = state2enum[ 'skip' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing the initial characters of a row.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar delimiterLastIndex;\n\tvar newlineLastIndex;\n\tvar commentLastIndex;\n\tvar escapeLastIndex;\n\tvar quoteLastIndex;\n\tvar skipLastIndex;\n\tvar delimiter;\n\tvar newline;\n\tvar comment;\n\tvar quoting;\n\tvar escape;\n\tvar strict;\n\tvar quote;\n\tvar skip;\n\n\tcommentLastIndex = parser._commentLastIndex;\n\tcomment = parser._comment;\n\n\tskipLastIndex = parser._skipLastIndex;\n\tskip = parser._skip;\n\n\tescapeLastIndex = parser._escapeLastIndex;\n\tescape = parser._escape;\n\n\tquoteLastIndex = parser._quoteLastIndex;\n\tquote = parser._quote;\n\n\tdelimiterLastIndex = parser._delimiterLastIndex;\n\tdelimiter = parser._delimiter;\n\n\tnewlineLastIndex = parser._newlineLastIndex;\n\tnewline = parser._newline;\n\n\tquoting = parser._quoting;\n\tstrict = parser._strict;\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tvar idx = parser._cursor + 1;\n\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for the start of a commented line.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   In order for a row to be considered a commented line, the comment sequence must be the first character(s) of the field.\n\t\t*/\n\t\tif (\n\t\t\tcomment &&                                // user specified a comment character sequence, so should check for comments\n\t\t\tidx-commentLastIndex === 0 &&             // only search the first character(s) of the first field\n\t\t\tch === comment[ commentLastIndex ] &&     // we have a potential comment match\n\t\t\tparser._scan( comment, commentLastIndex ) // we found a match\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the comment character sequence:\n\t\t\tdebug( 'Comment.' );\n\t\t\tparser._rewind( commentLastIndex )._changeState( COMMENT );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for the start of a skipped line.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   In order for a row to be considered a skipped line, the skip sequence must be the first character(s) of the field.\n\t\t*/\n\t\tif (\n\t\t\tskip &&                                // user specified a skip character sequence, so should check for skipped lines\n\t\t\tidx-skipLastIndex === 0 &&             // only search the first character(s) of the first field\n\t\t\tch === skip[ skipLastIndex ] &&        // we have a potential match\n\t\t\tparser._scan( skip, skipLastIndex )    // we found a match\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the skip character sequence:\n\t\t\tdebug( 'Skip.' );\n\t\t\tparser._rewind( skipLastIndex )._changeState( SKIP );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for an escape character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   An escape sequence escapes the delimiter, newline, and escape sequences in **non-quoted** fields.\n\t\t* -   An escape sequence escapes comment and skip sequences in **non-quoted** fields when an escape sequence occurs at the beginning of a record.\n\t\t* -   When `doublequote` is `false`, the escape sequence escapes quote sequences within **quoted** fields.\n\t\t* -   In strict mode, if not immediately followed by a special character sequence, then the parser raises an exception.\n\t\t* -   In non-strict mode, if not immediately followed by a special character sequence, then the escape sequence has no special meaning.\n\t\t*/\n\t\tif (\n\t\t\tch === escape[ escapeLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( escape, escapeLastIndex ) // we found a match\n\t\t) {\n\t\t\tdebug( 'Escape.' );\n\t\t\tparser._push( ch )._changeState( ESCAPE );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a quote character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   When `quoting` is `true`, in order for a field to be quoted, the quote sequence must be the first character(s) of the field.\n\t\t* -   When `quoting` is `false`, quote sequences do **not** have any special meaning, and we process quote sequences as normal field text.\n\t\t*/\n\t\tif (\n\t\t\tidx-quoteLastIndex === 0 &&           // only search the first character(s) of the field\n\t\t\tch === quote[ quoteLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( quote, quoteLastIndex ) // we found a match\n\t\t) {\n\t\t\tif ( quoting ) {\n\t\t\t\t// Rewind the cursor to point to the last character before the quote character sequence:\n\t\t\t\tdebug( 'Quote.' );\n\t\t\t\tparser._rewind( quoteLastIndex )._changeState( QUOTED_FIELD );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Continue processing until we can transition to a new state:\n\t\t\tparser._push( ch );\n\t\t\treturn;\n\t\t}\n\t\t/**\n\t\t* Check for a quote character sequence (non-strict mode).\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   In non-strict mode, a quote character sequence is allowed to start after whitespace (e.g., `a,  \"b\",  c`).\n\t\t* -   When `quoting` is `true`, in order for a field to be quoted, the quote sequence must be the first character(s) of the field.\n\t\t* -   When `quoting` is `false`, quote sequences do **not** have any special meaning, and we process quote sequences as normal field text.\n\t\t*/\n\t\tif (\n\t\t\tstrict === false &&                   // non-strict mode\n\t\t\tch === quote[ quoteLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( quote, quoteLastIndex ) // we found a match\n\t\t) {\n\t\t\tif ( quoting && parser._isWhitespace( 0, parser._cursor-quoteLastIndex ) ) {\n\t\t\t\t// Rewind the cursor to the beginning of the buffer:\n\t\t\t\tdebug( 'Quote.' );\n\t\t\t\tparser._raiseWarning( 'INVALID_OPENING_QUOTE' )\n\t\t\t\t\t._rewind( idx )\n\t\t\t\t\t._changeState( QUOTED_FIELD );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Continue processing until we can transition to a new state:\n\t\t\tparser._push( ch );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a field delimiter.\n\t\t*/\n\t\tif (\n\t\t\tch === delimiter[ delimiterLastIndex ] &&\n\t\t\tparser._scan( delimiter, delimiterLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the delimiter character sequence:\n\t\t\tdebug( 'Delimiter.' );\n\t\t\tparser._rewind( delimiterLastIndex )._changeState( FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a row separator.\n\t\t*/\n\t\tif (\n\t\t\tch === newline[ newlineLastIndex ] &&\n\t\t\tparser._scan( newline, newlineLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the newline character sequence:\n\t\t\tdebug( 'Newline.' );\n\t\t\tparser._rewind( newlineLastIndex )._changeState( INIT );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:invalid_quote_end' );\n\n// Possible transition states...\nvar ERROR = state2enum[ 'error' ];\nvar FIELD = state2enum[ 'field' ];\nvar INIT = state2enum[ 'init' ];\n\n\n// FUNCTIONS //\n\n/**\n* Removes whitespace following a closing quote sequence.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @param {NonNegativeInteger} state - next state\n* @returns {void}\n*/\nfunction removeWhitespace( parser, state ) {\n\t// Check whether the character sequence consists only of whitespace:\n\tif ( parser._isWhitespace( parser._qidx+1, parser._cursor ) ) {\n\t\t// Rewind the cursor and resume normal processing:\n\t\tparser._raiseWarning( 'INVALID_CLOSING_QUOTE' )\n\t\t\t._rewind( parser._cursor-parser._qidx )\n\t\t\t._changeState( state );\n\t\treturn;\n\t}\n\t// Non-whitespace characters came after a closing quote, leaving us in an ambiguous state: was the closing quote intended and we're missing a delimiter/newline, or was the closing quote a mistake and should have been escaped? We don't know, and so we must raise an exception:\n\tdebug( 'Error.' );\n\tparser._setErrorState( 'INVALID_CLOSING_QUOTE' )._changeState( ERROR );\n}\n\n\n// MAIN //\n\n/**\n* Returns a function for processing field characters after an ending quote sequence.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar delimiterLastIndex;\n\tvar newlineLastIndex;\n\tvar delimiter;\n\tvar newline;\n\n\tdelimiterLastIndex = parser._delimiterLastIndex;\n\tdelimiter = parser._delimiter;\n\n\tnewlineLastIndex = parser._newlineLastIndex;\n\tnewline = parser._newline;\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for a field delimiter.\n\t\t*/\n\t\tif (\n\t\t\tch === delimiter[ delimiterLastIndex ] &&\n\t\t\tparser._scan( delimiter, delimiterLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the delimiter character sequence:\n\t\t\tdebug( 'Delimiter.' );\n\t\t\tparser._rewind( delimiterLastIndex );\n\n\t\t\t// Remove whitespace and resume processing:\n\t\t\tremoveWhitespace( parser, FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a row separator.\n\t\t*/\n\t\tif (\n\t\t\tch === newline[ newlineLastIndex ] &&\n\t\t\tparser._scan( newline, newlineLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the newline character sequence:\n\t\t\tdebug( 'Newline.' );\n\t\t\tparser._rewind( newlineLastIndex );\n\n\t\t\t// Remove whitespace and resume processing:\n\t\t\tremoveWhitespace( parser, INIT );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar maximum = require( './max.js' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:quote_end' );\n\n// Possible transition states...\nvar ERROR = state2enum[ 'error' ];\nvar FIELD = state2enum[ 'field' ];\nvar INIT = state2enum[ 'init' ];\nvar INVALID_QUOTE_END = state2enum[ 'invalid_quote_end' ];\nvar QUOTED_FIELD = state2enum[ 'quoted_field' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing an ending quote sequence.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar delimiterLastIndex;\n\tvar newlineLastIndex;\n\tvar quoteLastIndex;\n\tvar doublequote;\n\tvar delimiter;\n\tvar newline;\n\tvar strict;\n\tvar quote;\n\tvar max;\n\n\tdelimiterLastIndex = parser._delimiterLastIndex;\n\tdelimiter = parser._delimiter;\n\n\tnewlineLastIndex = parser._newlineLastIndex;\n\tnewline = parser._newline;\n\n\tquoteLastIndex = parser._quoteLastIndex;\n\tquote = parser._quote;\n\n\tdoublequote = parser._doublequote;\n\tstrict = parser._strict;\n\n\tmax = maximum( maximum( delimiterLastIndex, newlineLastIndex ), quoteLastIndex ); // eslint-disable-line max-len\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for a quote character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   When `doublequote` is `true`, quote character sequences are escaped by a preceding quote character sequence.\n\t\t* -   When `doublequote` is `false`, quote character sequences must be explicitly escaped using an escape character sequence.\n\t\t*/\n\t\tif (\n\t\t\tdoublequote &&\n\t\t\tch === quote[ quoteLastIndex ] &&\n\t\t\tparser._scan( quote, quoteLastIndex )\n\t\t) {\n\t\t\t// Keep the escaped quote character sequence and transition back to a quoted field state:\n\t\t\tdebug( 'Double quote.' );\n\t\t\tparser._push( ch )._changeState( QUOTED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a field delimiter.\n\t\t*/\n\t\tif (\n\t\t\tch === delimiter[ delimiterLastIndex ] &&\n\t\t\tparser._scan( delimiter, delimiterLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the delimiter character sequence:\n\t\t\tdebug( 'Delimiter.' );\n\t\t\tparser._rewind( delimiterLastIndex )._changeState( FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a row separator.\n\t\t*/\n\t\tif (\n\t\t\tch === newline[ newlineLastIndex ] &&\n\t\t\tparser._scan( newline, newlineLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the newline character sequence:\n\t\t\tdebug( 'Newline.' );\n\t\t\tparser._rewind( newlineLastIndex )._changeState( INIT );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a non-special character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   Field separators, row separators, and escaped quote sequences must immediately follow a potential closing quote sequence. At some point, we'll have processed a greater number of characters than exists in any of the special character sequences, meaning that none of those sequences immediately follow the quote sequence which led to the current state. Once this happens, we're in an invalid state and must raise an exception, as not clear how the parser should interpret the preceding values (e.g., was the preceding quote supposed to be escaped? was the preceding quote a mistake and should be ignored? are we missing a delimiter or newline sequence? etc.). In strict mode, we raise an exception. In non-strict mode, we only raise an exception if non-whitespace characters follow the potential closing quote sequence.\n\t\t*/\n\t\tif ( parser._cursor-parser._qidx >= max ) {\n\t\t\tif ( strict ) {\n\t\t\t\tdebug( 'Error.' );\n\t\t\t\tparser._setErrorState( 'INVALID_CLOSING_QUOTE' )._changeState( ERROR );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdebug( 'Invalid closing quote.' );\n\t\t\tparser._push( ch )._changeState( INVALID_QUOTE_END );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:quoted_escape' );\n\n// Possible transition states...\nvar ERROR = state2enum[ 'error' ];\nvar QUOTED_FIELD = state2enum[ 'quoted_field' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing an escape sequence within a quoted field.\n*\n* ## Notes\n*\n* -   Within a quoted field, an escape sequence (only) escapes the quote sequence.\n* -   In strict mode, if not immediately followed by a special character sequence, then the parser raises an exception.\n* -   In non-strict mode, if not immediately followed by a special character sequence, then the escape sequence has no special meaning and is considered a normal character sequence.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar escapeLastIndex;\n\tvar quoteLastIndex;\n\tvar escapeLength;\n\tvar strict;\n\tvar quote;\n\n\tquoteLastIndex = parser._quoteLastIndex;\n\tquote = parser._quote;\n\n\tescapeLastIndex = parser._escapeLastIndex;\n\tescapeLength = parser._escapeLength;\n\n\tstrict = parser._strict;\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tvar cursor = parser._cursor;\n\t\tvar idx = parser._eidx; // position of last escape character\n\t\tvar d = cursor - idx;\n\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for a quote sequence.\n\t\t*/\n\t\tif (\n\t\t\td === quoteLastIndex &&\n\t\t\tch === quote[ quoteLastIndex ] &&\n\t\t\tparser._scan( quote, quoteLastIndex )\n\t\t) {\n\t\t\tdebug( 'Quote.' );\n\t\t\tparser._copyWithin( idx-escapeLastIndex, idx+1, quoteLastIndex )\n\t\t\t\t._rewind( escapeLength )\n\t\t\t\t._push( ch )\n\t\t\t\t._changeState( QUOTED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a non-special character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   In strict mode, quote sequences must immediately follow an escape sequence. At some point, we'll have processed a greater number of characters than exists in a quote sequence, meaning that a quote sequence does not immediately follow the escape sequence which led to the current state. Once this happens, we're in an invalid state and must raise an exception, as not clear how the parser should interpret the preceding values (e.g., was the preceding escape sequence a mistake and should be ignored? are we missing a quote sequence? etc.).\n\t\t* -   In non-strict mode, we assume that the escape sequence is a normal character sequence.\n\t\t*/\n\t\tif ( d >= quoteLastIndex ) {\n\t\t\tif ( strict ) {\n\t\t\t\tdebug( 'Error.' );\n\t\t\t\tparser._setErrorState( 'INVALID_QUOTED_ESCAPE' )._changeState( ERROR );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Return to normal field processing:\n\t\t\tdebug( 'Escape sequence is not followed by a quote sequence.' );\n\t\t\tparser._raiseWarning( 'INVALID_QUOTED_ESCAPE' )._push( ch )._changeState( QUOTED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:quoted_field' );\n\n// Possible transition states...\nvar QUOTE_END = state2enum[ 'quote_end' ];\nvar QUOTED_ESCAPE = state2enum[ 'quoted_escape' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing a quoted field.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar escapeLastIndex;\n\tvar quoteLastIndex;\n\tvar doublequote;\n\tvar escape;\n\tvar quote;\n\n\tescapeLastIndex = parser._escapeLastIndex;\n\tescape = parser._escape;\n\n\tquoteLastIndex = parser._quoteLastIndex;\n\tquote = parser._quote;\n\n\tdoublequote = parser._doublequote;\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for an escape character sequence.\n\t\t*/\n\t\tif (\n\t\t\tdoublequote === false &&                // double quoting is disabled\n\t\t\tch === escape[ escapeLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( escape, escapeLastIndex ) // we found a match\n\t\t) {\n\t\t\tdebug( 'Escape.' );\n\t\t\tparser._push( ch )._changeState( QUOTED_ESCAPE );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for an ending quote character sequence.\n\t\t*/\n\t\tif (\n\t\t\tch === quote[ quoteLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( quote, quoteLastIndex ) // we found a match\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the quote character sequence:\n\t\t\tdebug( 'Quote.' );\n\t\t\tparser._rewind( quoteLastIndex )._changeState( QUOTE_END );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:skip' );\n\n// Possible transition states...\nvar INIT = state2enum[ 'init' ];\nvar SKIP = state2enum[ 'skip' ];\nvar SKIPPED_COMMENT = state2enum[ 'skipped_comment' ];\nvar SKIPPED_FIELD = state2enum[ 'skipped_field' ];\nvar SKIPPED_ESCAPE = state2enum[ 'skipped_escape' ];\nvar SKIPPED_QUOTED_FIELD = state2enum[ 'skipped_quoted_field' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing a skipped line.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar delimiterLastIndex;\n\tvar newlineLastIndex;\n\tvar commentLastIndex;\n\tvar escapeLastIndex;\n\tvar quoteLastIndex;\n\tvar skipLastIndex;\n\tvar delimiter;\n\tvar newline;\n\tvar comment;\n\tvar quoting;\n\tvar escape;\n\tvar strict;\n\tvar quote;\n\tvar skip;\n\n\tcommentLastIndex = parser._commentLastIndex;\n\tcomment = parser._comment;\n\n\tskipLastIndex = parser._skipLastIndex;\n\tskip = parser._skip;\n\n\tescapeLastIndex = parser._escapeLastIndex;\n\tescape = parser._escape;\n\n\tquoteLastIndex = parser._quoteLastIndex;\n\tquote = parser._quote;\n\n\tdelimiterLastIndex = parser._delimiterLastIndex;\n\tdelimiter = parser._delimiter;\n\n\tnewlineLastIndex = parser._newlineLastIndex;\n\tnewline = parser._newline;\n\n\tquoting = parser._quoting;\n\tstrict = parser._strict;\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tvar idx = parser._cursor + 1;\n\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for the start of a commented line.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   In order for a row to be considered a commented line, the comment sequence must be the first character(s) of the field.\n\t\t*/\n\t\tif (\n\t\t\tcomment &&                                // user specified a comment character sequence, so should check for comments\n\t\t\tidx-commentLastIndex === 0 &&             // only search the first character(s) of the first field\n\t\t\tch === comment[ commentLastIndex ] &&     // we have a potential comment match\n\t\t\tparser._scan( comment, commentLastIndex ) // we found a match\n\t\t) {\n\t\t\tdebug( 'Comment.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_COMMENT );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for the start of a skipped line.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   In order for a row to be considered a skipped line, the skip sequence must be the first character(s) of the field.\n\t\t*/\n\t\tif (\n\t\t\tskip &&                                // user specified a skip character sequence, so should check for skipped lines\n\t\t\tidx-skipLastIndex === 0 &&             // only search the first character(s) of the first field\n\t\t\tch === skip[ skipLastIndex ] &&        // we have a potential match\n\t\t\tparser._scan( skip, skipLastIndex )    // we found a match\n\t\t) {\n\t\t\tdebug( 'Skip.' );\n\t\t\tparser._push( ch )._changeState( SKIP );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for an escape character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   An escape sequence escapes the delimiter, newline, and escape sequences in **non-quoted** fields.\n\t\t* -   An escape sequence escapes comment and skip sequences in **non-quoted** fields when an escape sequence occurs at the beginning of a record.\n\t\t* -   When `doublequote` is `false`, the escape sequence escapes quote sequences within **quoted** fields.\n\t\t* -   If not immediately followed by a special character sequence, then the escape sequence has no special meaning.\n\t\t*/\n\t\tif (\n\t\t\tch === escape[ escapeLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( escape, escapeLastIndex ) // we found a match\n\t\t) {\n\t\t\tdebug( 'Escape.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_ESCAPE );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a quote character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   When `quoting` is `true`, in order for a field to be quoted, the quote sequence must be the first character(s) of the field.\n\t\t* -   When `quoting` is `false`, quote sequences do **not** have any special meaning, and we process quote sequences as normal field text.\n\t\t*/\n\t\tif (\n\t\t\tidx-quoteLastIndex === 0 &&           // only search the first character(s) of the field\n\t\t\tch === quote[ quoteLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( quote, quoteLastIndex ) // we found a match\n\t\t) {\n\t\t\tif ( quoting ) {\n\t\t\t\tdebug( 'Quote.' );\n\t\t\t\tparser._push( ch )._changeState( SKIPPED_QUOTED_FIELD );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Continue processing until we can transition to a new state:\n\t\t\tparser._push( ch );\n\t\t\treturn;\n\t\t}\n\t\t/**\n\t\t* Check for a quote character sequence (non-strict mode).\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   In non-strict mode, a quote character sequence is allowed to start after whitespace (e.g., `a,  \"b\",  c`).\n\t\t* -   When `quoting` is `true`, in order for a field to be quoted, the quote sequence must be the first character(s) of the field.\n\t\t* -   When `quoting` is `false`, quote sequences do **not** have any special meaning, and we process quote sequences as normal field text.\n\t\t*/\n\t\tif (\n\t\t\tstrict === false &&                   // non-strict mode\n\t\t\tch === quote[ quoteLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( quote, quoteLastIndex ) // we found a match\n\t\t) {\n\t\t\tif ( quoting && parser._isWhitespace( 0, parser._cursor-quoteLastIndex ) ) {\n\t\t\t\tdebug( 'Quote.' );\n\t\t\t\tparser._push( ch )._changeState( SKIPPED_QUOTED_FIELD );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Continue processing until we can transition to a new state:\n\t\t\tparser._push( ch );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a field delimiter.\n\t\t*/\n\t\tif (\n\t\t\tch === delimiter[ delimiterLastIndex ] &&\n\t\t\tparser._scan( delimiter, delimiterLastIndex )\n\t\t) {\n\t\t\tdebug( 'Delimiter.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a row separator.\n\t\t*/\n\t\tif (\n\t\t\tch === newline[ newlineLastIndex ] &&\n\t\t\tparser._scan( newline, newlineLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the newline character sequence:\n\t\t\tdebug( 'Newline.' );\n\t\t\tparser._rewind( newlineLastIndex )._changeState( INIT );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:skipped_comment' );\n\n// Possible transition states...\nvar INIT = state2enum[ 'init' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing a skipped commented line.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar newlineLastIndex;\n\tvar newline;\n\n\tnewlineLastIndex = parser._newlineLastIndex;\n\tnewline = parser._newline;\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tdebug( 'Char: %s', ch );\n\n\t\t// Check for the end of the commented line...\n\t\tif (\n\t\t\tch === newline[ newlineLastIndex ] &&\n\t\t\tparser._scan( newline, newlineLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the newline character sequence:\n\t\t\tdebug( 'Newline.' );\n\t\t\tparser._rewind( newlineLastIndex )._changeState( INIT );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar maximum = require( './max.js' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:skipped_escape' );\n\n// Possible transition states...\nvar SKIPPED_FIELD = state2enum[ 'skipped_field' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing an escape sequence within a skipped line.\n*\n* ## Notes\n*\n* -   An escape sequence escapes the delimiter, newline, and escape sequences in **non-quoted** fields.\n* -   An escape sequence escapes comment and skip sequences in **non-quoted** fields when an escape sequence occurs at the beginning of a record.\n* -   If not immediately followed by a special character sequence, then the escape sequence has no special meaning and is considered a normal character sequence.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar delimiterLastIndex;\n\tvar newlineLastIndex;\n\tvar commentLastIndex;\n\tvar escapeLastIndex;\n\tvar skipLastIndex;\n\tvar delimiter;\n\tvar newline;\n\tvar comment;\n\tvar escape;\n\tvar skip;\n\tvar max;\n\n\tdelimiterLastIndex = parser._delimiterLastIndex;\n\tdelimiter = parser._delimiter;\n\n\tnewlineLastIndex = parser._newlineLastIndex;\n\tnewline = parser._newline;\n\n\tcommentLastIndex = parser._commentLastIndex;\n\tcomment = parser._comment;\n\n\tskipLastIndex = parser._skipLastIndex;\n\tskip = parser._skip;\n\n\tescapeLastIndex = parser._escapeLastIndex;\n\tescape = parser._escape;\n\n\tmax = maximum( maximum( delimiterLastIndex, newlineLastIndex ), escapeLastIndex ); // eslint-disable-line max-len\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tvar cursor = parser._cursor;\n\t\tvar idx = parser._eidx; // position of last escape character\n\t\tvar d = cursor - idx;\n\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for a field delimiter.\n\t\t*/\n\t\tif (\n\t\t\td === delimiterLastIndex &&\n\t\t\tch === delimiter[ delimiterLastIndex ] &&\n\t\t\tparser._scan( delimiter, delimiterLastIndex )\n\t\t) {\n\t\t\tdebug( 'Delimiter.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a row separator.\n\t\t*/\n\t\tif (\n\t\t\td === newlineLastIndex &&\n\t\t\tch === newline[ newlineLastIndex ] &&\n\t\t\tparser._scan( newline, newlineLastIndex )\n\t\t) {\n\t\t\tdebug( 'Newline.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for an escape sequence.\n\t\t*/\n\t\tif (\n\t\t\td === escapeLastIndex &&\n\t\t\tch === escape[ escapeLastIndex ] &&\n\t\t\tparser._scan( escape, escapeLastIndex )\n\t\t) {\n\t\t\tdebug( 'Escape.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a comment sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   Comment sequences only have special meaning when appearing at the beginning of a row.\n\t\t*/\n\t\tif (\n\t\t\tcomment &&                                 // user specified a comment character sequence, so should check for comments\n\t\t\tcursor-commentLastIndex === 0 &&           // only search the first character(s) of the row\n\t\t\tch === comment[ commentLastIndex ] &&      // we have a potential match\n\t\t\tparser._scan( comment, commentLastIndex )  // we found a match\n\t\t) {\n\t\t\tdebug( 'Comment.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a skip sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   Skip sequences only have special meaning when appearing at the beginning of a row.\n\t\t*/\n\t\tif (\n\t\t\tskip &&                                 // user specified a skip character sequence, so should check for a skipped line\n\t\t\tcursor-skipLastIndex === 0 &&           // only search the first character(s) of the row\n\t\t\tch === skip[ skipLastIndex ] &&         // we have a potential match\n\t\t\tparser._scan( skip, skipLastIndex )     // we found a match\n\t\t) {\n\t\t\tdebug( 'Skip.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a non-special character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   Field separators, row separators, and escaped sequences must immediately follow an escape sequence. At some point, we'll have processed a greater number of characters than exists in any of the special character sequences, meaning that none of those sequences immediately follow the escape sequence which led to the current state. Once this happens, we assume that the escape sequence is a normal character sequence.\n\t\t*/\n\t\tif ( d >= max ) {\n\t\t\tdebug( 'Normal character sequence.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:skipped_field' );\n\n// Possible transition states...\nvar INIT = state2enum[ 'init' ];\nvar SKIPPED_ESCAPE = state2enum[ 'skipped_escape' ];\nvar SKIPPED_FIELD = state2enum[ 'skipped_field' ];\nvar SKIPPED_QUOTED_FIELD = state2enum[ 'skipped_quoted_field' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing a field within a skipped line.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar delimiterLastIndex;\n\tvar newlineLastIndex;\n\tvar escapeLastIndex;\n\tvar quoteLastIndex;\n\tvar delimiter;\n\tvar newline;\n\tvar quoting;\n\tvar escape;\n\tvar strict;\n\tvar quote;\n\n\tescapeLastIndex = parser._escapeLastIndex;\n\tescape = parser._escape;\n\n\tquoteLastIndex = parser._quoteLastIndex;\n\tquote = parser._quote;\n\n\tdelimiterLastIndex = parser._delimiterLastIndex;\n\tdelimiter = parser._delimiter;\n\n\tnewlineLastIndex = parser._newlineLastIndex;\n\tnewline = parser._newline;\n\n\tquoting = parser._quoting;\n\tstrict = parser._strict;\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tvar idx = parser._cursor - parser._cidx + 1;\n\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for an escape character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   An escape sequence escapes the delimiter, newline, and escape sequences in **non-quoted** fields.\n\t\t* -   When `doublequote` is `false`, the escape sequence escapes quote sequences within **quoted** fields.\n\t\t* -   If not immediately followed by a special character sequence, then the escape sequence has no special meaning.\n\t\t*/\n\t\tif (\n\t\t\tch === escape[ escapeLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( escape, escapeLastIndex ) // we found a match\n\t\t) {\n\t\t\tdebug( 'Escape.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_ESCAPE );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a quote character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   When `quoting` is `true`, in order for a field to be quoted, the quote sequence must be the first character(s) of the field.\n\t\t* -   When `quoting` is `false`, quote sequences do **not** have any special meaning, and we process quote sequences as normal field text.\n\t\t*/\n\t\tif (\n\t\t\tidx-quoteLastIndex === 0 &&           // only search the first character(s) of the field\n\t\t\tch === quote[ quoteLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( quote, quoteLastIndex ) // we found a match\n\t\t) {\n\t\t\tparser._push( ch );\n\t\t\tif ( quoting ) {\n\t\t\t\tdebug( 'Quote.' );\n\t\t\t\tparser._changeState( SKIPPED_QUOTED_FIELD );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Continue processing until we can transition to a new state:\n\t\t\treturn;\n\t\t}\n\t\t/**\n\t\t* Check for a quote character sequence (non-strict mode).\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   In non-strict mode, a quote character sequence is allowed to start after whitespace (e.g., `a,  \"b\",  c`).\n\t\t* -   When `quoting` is `true`, in order for a field to be quoted, the quote sequence must be the first character(s) of the field.\n\t\t* -   When `quoting` is `false`, quote sequences do **not** have any special meaning, and we process quote sequences as normal field text.\n\t\t*/\n\t\tif (\n\t\t\tstrict === false &&                   // non-strict mode\n\t\t\tch === quote[ quoteLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( quote, quoteLastIndex ) // we found a match\n\t\t) {\n\t\t\tparser._push( ch );\n\t\t\tif ( quoting && parser._isWhitespace( parser._cidx, parser._cursor-quoteLastIndex ) ) {\n\t\t\t\tdebug( 'Quote.' );\n\t\t\t\tparser._changeState( SKIPPED_QUOTED_FIELD );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Continue processing until we can transition to a new state:\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a field delimiter.\n\t\t*/\n\t\tif (\n\t\t\tch === delimiter[ delimiterLastIndex ] &&\n\t\t\tparser._scan( delimiter, delimiterLastIndex )\n\t\t) {\n\t\t\tdebug( 'Delimiter.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a row separator.\n\t\t*/\n\t\tif (\n\t\t\tch === newline[ newlineLastIndex ] &&\n\t\t\tparser._scan( newline, newlineLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the newline character sequence:\n\t\t\tdebug( 'Newline.' );\n\t\t\tparser._rewind( newlineLastIndex )._changeState( INIT );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:skipped_invalid_quote_end' );\n\n// Possible transition states...\nvar SKIPPED_FIELD = state2enum[ 'skipped_field' ];\nvar INIT = state2enum[ 'init' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing field characters after an ending quote sequence within a skipped line.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar delimiterLastIndex;\n\tvar newlineLastIndex;\n\tvar delimiter;\n\tvar newline;\n\n\tdelimiterLastIndex = parser._delimiterLastIndex;\n\tdelimiter = parser._delimiter;\n\n\tnewlineLastIndex = parser._newlineLastIndex;\n\tnewline = parser._newline;\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for a field delimiter.\n\t\t*/\n\t\tif (\n\t\t\tch === delimiter[ delimiterLastIndex ] &&\n\t\t\tparser._scan( delimiter, delimiterLastIndex )\n\t\t) {\n\t\t\tdebug( 'Delimiter.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a row separator.\n\t\t*/\n\t\tif (\n\t\t\tch === newline[ newlineLastIndex ] &&\n\t\t\tparser._scan( newline, newlineLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the newline character sequence:\n\t\t\tdebug( 'Newline.' );\n\t\t\tparser._rewind( newlineLastIndex )._changeState( INIT );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar maximum = require( './max.js' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:skipped_quote_end' );\n\n// Possible transition states...\nvar INIT = state2enum[ 'init' ];\nvar SKIPPED_FIELD = state2enum[ 'skipped_field' ];\nvar SKIPPED_INVALID_QUOTE_END = state2enum[ 'skipped_invalid_quote_end' ];\nvar SKIPPED_QUOTED_FIELD = state2enum[ 'skipped_quoted_field' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing an ending quote sequence within a skipped line.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar delimiterLastIndex;\n\tvar newlineLastIndex;\n\tvar quoteLastIndex;\n\tvar doublequote;\n\tvar delimiter;\n\tvar newline;\n\tvar quote;\n\tvar max;\n\n\tdelimiterLastIndex = parser._delimiterLastIndex;\n\tdelimiter = parser._delimiter;\n\n\tnewlineLastIndex = parser._newlineLastIndex;\n\tnewline = parser._newline;\n\n\tquoteLastIndex = parser._quoteLastIndex;\n\tquote = parser._quote;\n\n\tdoublequote = parser._doublequote;\n\n\tmax = maximum( maximum( delimiterLastIndex, newlineLastIndex ), quoteLastIndex ); // eslint-disable-line max-len\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for a quote character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   When `doublequote` is `true`, quote character sequences are escaped by a preceding quote character sequence.\n\t\t* -   When `doublequote` is `false`, quote character sequences must be explicitly escaped using an escape character sequence.\n\t\t*/\n\t\tif (\n\t\t\tdoublequote &&\n\t\t\tch === quote[ quoteLastIndex ] &&\n\t\t\tparser._scan( quote, quoteLastIndex )\n\t\t) {\n\t\t\tdebug( 'Double quote.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_QUOTED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a field delimiter.\n\t\t*/\n\t\tif (\n\t\t\tch === delimiter[ delimiterLastIndex ] &&\n\t\t\tparser._scan( delimiter, delimiterLastIndex )\n\t\t) {\n\t\t\tdebug( 'Delimiter.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a row separator.\n\t\t*/\n\t\tif (\n\t\t\tch === newline[ newlineLastIndex ] &&\n\t\t\tparser._scan( newline, newlineLastIndex )\n\t\t) {\n\t\t\t// Rewind the cursor to point to the last character before the newline character sequence:\n\t\t\tdebug( 'Newline.' );\n\t\t\tparser._rewind( newlineLastIndex )._changeState( INIT );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a non-special character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   Field separators, row separators, and escaped quote sequences must immediately follow a potential closing quote sequence. At some point, we'll have processed a greater number of characters than exists in any of the special character sequences, meaning that none of those sequences immediately follow the quote sequence which led to the current state. Once this happens, we in an invalid state.\n\t\t*/\n\t\tif ( parser._cursor-parser._qidx >= max ) {\n\t\t\tdebug( 'Invalid closing quote.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_INVALID_QUOTE_END );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:skipped_quoted_escape' );\n\n// Possible transition states...\nvar SKIPPED_QUOTED_FIELD = state2enum[ 'skipped_quoted_field' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing an escape sequence within a quoted field within a skipped line.\n*\n* ## Notes\n*\n* -   Within a quoted field, an escape sequence (only) escapes the quote sequence.\n* -   If not immediately followed by a special character sequence, then the escape sequence has no special meaning and is considered a normal character sequence.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar quoteLastIndex;\n\tvar quote;\n\n\tquoteLastIndex = parser._quoteLastIndex;\n\tquote = parser._quote;\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tvar cursor = parser._cursor;\n\t\tvar idx = parser._eidx; // position of last escape character\n\t\tvar d = cursor - idx;\n\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for a quote sequence.\n\t\t*/\n\t\tif (\n\t\t\td === quoteLastIndex &&\n\t\t\tch === quote[ quoteLastIndex ] &&\n\t\t\tparser._scan( quote, quoteLastIndex )\n\t\t) {\n\t\t\tdebug( 'Quote.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_QUOTED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for a non-special character sequence.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   Quote sequences must immediately follow an escape sequence. At some point, we'll have processed a greater number of characters than exists in a quote sequence, meaning that a quote sequence does not immediately follow the escape sequence which led to the current state. Once this happens, we assume that the escape sequence is a normal character sequence.\n\t\t*/\n\t\tif ( d >= quoteLastIndex ) {\n\t\t\t// Return to normal field processing:\n\t\t\tdebug( 'Escape sequence is not followed by a quote sequence.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_QUOTED_FIELD );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar state2enum = require( './state2enum.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'state:skipped_quoted_field' );\n\n// Possible transition states...\nvar SKIPPED_QUOTE_END = state2enum[ 'skipped_quote_end' ];\nvar SKIPPED_QUOTED_ESCAPE = state2enum[ 'skipped_quoted_escape' ];\n\n\n// MAIN //\n\n/**\n* Returns a function for processing a quoted field within a skipped line.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Function} processing function\n*/\nfunction processor( parser ) {\n\tvar escapeLastIndex;\n\tvar quoteLastIndex;\n\tvar doublequote;\n\tvar escape;\n\tvar quote;\n\n\tescapeLastIndex = parser._escapeLastIndex;\n\tescape = parser._escape;\n\n\tquoteLastIndex = parser._quoteLastIndex;\n\tquote = parser._quote;\n\n\tdoublequote = parser._doublequote;\n\n\treturn next;\n\n\t/**\n\t* Processes a character.\n\t*\n\t* @private\n\t* @param {string} ch - character\n\t* @returns {void}\n\t*/\n\tfunction next( ch ) {\n\t\tdebug( 'Char: %s', ch );\n\n\t\t/*\n\t\t* Check for an escape character sequence.\n\t\t*/\n\t\tif (\n\t\t\tdoublequote === false &&                // double quoting is disabled\n\t\t\tch === escape[ escapeLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( escape, escapeLastIndex ) // we found a match\n\t\t) {\n\t\t\tdebug( 'Escape.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_QUOTED_ESCAPE );\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t* Check for an ending quote character sequence.\n\t\t*/\n\t\tif (\n\t\t\tch === quote[ quoteLastIndex ] &&     // we have a potential match\n\t\t\tparser._scan( quote, quoteLastIndex ) // we found a match\n\t\t) {\n\t\t\tdebug( 'Quote.' );\n\t\t\tparser._push( ch )._changeState( SKIPPED_QUOTE_END );\n\t\t\treturn;\n\t\t}\n\t\t// Continue processing until we can transition to a new state:\n\t\tparser._push( ch );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = processor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar enum2state = require( './enum2state.json' );\nvar closed = require( './closed.js' ); // eslint-disable-line stdlib/no-redeclare\nvar comment = require( './comment.js' );\nvar error = require( './error.js' );\nvar escape = require( './escape.js' ); // eslint-disable-line stdlib/no-redeclare\nvar field = require( './field.js' );\nvar init = require( './init.js' );\nvar invalidQuoteEnd = require( './invalid_quote_end.js' );\nvar quoteEnd = require( './quote_end.js' );\nvar quotedEscape = require( './quoted_escape.js' );\nvar quotedField = require( './quoted_field.js' );\nvar skip = require( './skip.js' );\nvar skippedComment = require( './skipped_comment.js' );\nvar skippedEscape = require( './skipped_escape.js' );\nvar skippedField = require( './skipped_field.js' );\nvar skippedInvalidQuoteEnd = require( './skipped_invalid_quote_end.js' );\nvar skippedQuoteEnd = require( './skipped_quote_end.js' );\nvar skippedQuotedEscape = require( './skipped_quoted_escape.js' );\nvar skippedQuotedField = require( './skipped_quoted_field.js' );\n\n\n// VARIABLES //\n\nvar table = {\n\t'closed': closed,\n\t'comment': comment,\n\t'escape': escape,\n\t'error': error,\n\t'field': field,\n\t'init': init,\n\t'invalid_quote_end': invalidQuoteEnd,\n\t'quote_end': quoteEnd,\n\t'quoted_escape': quotedEscape,\n\t'quoted_field': quotedField,\n\t'skip': skip,\n\t'skipped_comment': skippedComment,\n\t'skipped_escape': skippedEscape,\n\t'skipped_field': skippedField,\n\t'skipped_invalid_quote_end': skippedInvalidQuoteEnd,\n\t'skipped_quote_end': skippedQuoteEnd,\n\t'skipped_quoted_escape': skippedQuotedEscape,\n\t'skipped_quoted_field': skippedQuotedField\n};\n\n\n// MAIN //\n\n/**\n* Returns an object mapping state enumeration constants to state functions.\n*\n* @private\n* @param {Parser} parser - parser instance\n* @returns {Array<Function>} table\n*/\nfunction states( parser ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < enum2state.length; i++ ) {\n\t\tout.push( table[ enum2state[ i ] ]( parser ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = states;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this, max-len, no-underscore-dangle, max-lines */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar Boolean = require( '@stdlib/boolean-ctor' );\nvar format = require( '@stdlib/string-format' );\nvar rescape = require( '@stdlib/utils-escape-regexp-string' );\nvar replace = require( '@stdlib/string-base-replace' );\nvar defaults = require( './defaults.js' );\nvar state2enum = require( './states/state2enum.js' );\nvar enum2state = require( './states/enum2state.json' );\nvar states = require( './states' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'parser' );\n\n// Parser states:\nvar CLOSED = state2enum[ 'closed' ];\nvar COMMENT = state2enum[ 'comment' ];\nvar ERROR = state2enum[ 'error' ];\nvar ESCAPE = state2enum[ 'escape' ];\nvar FIELD = state2enum[ 'field' ];\nvar INIT = state2enum[ 'init' ];\nvar INVALID_QUOTE_END = state2enum[ 'invalid_quote_end' ];\nvar QUOTE_END = state2enum[ 'quote_end' ];\nvar QUOTED_ESCAPE = state2enum[ 'quoted_escape' ];\nvar QUOTED_FIELD = state2enum[ 'quoted_field' ];\nvar SKIP = state2enum[ 'skip' ];\nvar SKIPPED_COMMENT = state2enum[ 'skipped_comment' ];\nvar SKIPPED_ESCAPE = state2enum[ 'skipped_escape' ];\nvar SKIPPED_FIELD = state2enum[ 'skipped_field' ];\nvar SKIPPED_INVALID_QUOTE_END = state2enum[ 'skipped_invalid_quote_end' ];\nvar SKIPPED_QUOTE_END = state2enum[ 'skipped_quote_end' ];\nvar SKIPPED_QUOTED_ESCAPE = state2enum[ 'skipped_quoted_escape' ];\nvar SKIPPED_QUOTED_FIELD = state2enum[ 'skipped_quoted_field' ];\n\n\n// FUNCTIONS //\n\n/**\n* Returns a regular expression pattern which matches a list of strings.\n*\n* @private\n* @param {StringArray} list - list of strings to match\n* @returns {string} regular expression pattern\n*/\nfunction array2pattern( list ) {\n\tvar pattern;\n\tvar i;\n\n\tpattern = '(?:';\n\tfor ( i = 0; i < list.length-1; i++ ) {\n\t\tpattern += rescape( list[ i ] ) + '|';\n\t}\n\treturn pattern + rescape( list[ i ] ) + ')';\n}\n\n\n// MAIN //\n\n/**\n* Returns an incremental parser for delimiter-separated values.\n*\n* @constructor\n* @param {Options} options - options object\n* @returns {Parser} parser instance\n*\n* @example\n* var parser = new Parser();\n*\n* // ...\n*\n* parser.next( '1,2,3,4\\n' );\n*\n* // ...\n*\n* parser.next( '5,6,7,8\\n' );\n*\n* // ...\n*\n* parser.next( '9,10,11,12\\n' );\n*\n* // ...\n*\n* parser.close();\n*\n* // ...\n*\n* var bool = parser.done;\n* // returns true\n*/\nfunction Parser( options ) {\n\tvar opts;\n\n\tif ( !( this instanceof Parser ) ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn new Parser( options );\n\t\t}\n\t\treturn new Parser();\n\t}\n\t// TODO: option validation; enforce quote, comment, skip, delimiter, escape, and newline all being different and none can be a substring of the other (i.e., no escape equal to `,,` and delimiter equal to `,`, and no delimiter equal to `,` and newline being `,,` and vice versa; is `,,` an escape or simply an empty field?); should probably require that \"whitespace\" does not conflict with any of the special character sequences; require at least one whitespace character\n\toptions = options || {};\n\topts = defaults();\n\n\t// Buffer for tracking internal state:\n\tthis._buffer = [];\n\n\t// Index of the most recently processed character:\n\tthis._cursor = -1;\n\n\t// Index marking the beginning of the current field:\n\tthis._cidx = 0;\n\n\t// Indices marking the most recent unescaped quote sequence:\n\tthis._qidx = -1;\n\n\t// Indices marking the most recent escape sequence:\n\tthis._eidx = -1;\n\n\t// Buffer for storing the field values for the current row:\n\tthis._rowBufferFLG = Boolean( options.rowBuffer );\n\tthis._rowBuffer = options.rowBuffer || opts.rowBuffer;\n\n\t// Column, row, and line counters:\n\tthis._col = 0;\n\tthis._row = 0;\n\tthis._line = 0;\n\n\t// Initialize flags indicating whether we're processing a commented/skipped line:\n\tthis._commented = false;\n\tthis._skipped = false;\n\n\t// Initialize the error state:\n\tthis._errname = '';\n\n\t// Extract various options:\n\tthis._comment = options.comment || opts.comment;\n\tthis._delimiter = options.delimiter || opts.delimiter;\n\tthis._doublequote = ( options.doublequote === void 0 ) ? opts.doublequote : options.doublequote;\n\tthis._escape = options.escape || opts.escape;\n\tthis._ltrim = ( options.ltrim === void 0 ) ? opts.ltrim : options.ltrim;\n\tthis._maxRows = ( options.maxRows === void 0 ) ? opts.maxRows : options.maxRows;\n\tthis._newline = options.newline || opts.newline;\n\tthis._quote = options.quote || opts.quote;\n\tthis._quoting = ( options.quoting === void 0 ) ? opts.quoting : options.quoting;\n\tthis._rtrim = ( options.rtrim === void 0 ) ? opts.rtrim : options.rtrim;\n\tthis._skip = options.skip || opts.skip;\n\tthis._skipBlankRows = ( options.skipBlankRows === void 0 ) ? opts.skipBlankRows : options.skipBlankRows;\n\tthis._skipRow = options.skipRow || opts.skipRow;\n\tthis._strict = ( options.strict === void 0 ) ? opts.strict : options.strict;\n\tthis._trimComment = ( options.trimComment === void 0 ) ? opts.trimComment : options.trimComment;\n\tthis._whitespace = array2pattern( options.whitespace || opts.whitespace );\n\n\tthis._reWhitespace = new RegExp( '^'+this._whitespace+'*([\\\\S\\\\s]*?)'+this._whitespace+'*$' );\n\tthis._reWhitespaceLeft = new RegExp( '^'+this._whitespace+'*' );\n\tthis._reWhitespaceRight = new RegExp( this._whitespace+'*$' );\n\n\tthis._onClose = options.onClose || opts.onClose;\n\tthis._onColumn = options.onColumn || opts.onColumn;\n\tthis._onComment = options.onComment || opts.onComment;\n\tthis._onRow = options.onRow || opts.onRow;\n\tthis._onSkip = options.onSkip || opts.onSkip;\n\n\tthis._onError = options.onError || opts.onError;\n\tthis._onWarn = options.onWarn || opts.onWarn;\n\n\tthis._commentLength = this._comment.length;\n\tthis._commentLastIndex = this._commentLength - 1;\n\n\tthis._delimiterLength = this._delimiter.length;\n\tthis._delimiterLastIndex = this._delimiterLength - 1;\n\n\tthis._escapeLength = this._escape.length;\n\tthis._escapeLastIndex = this._escapeLength - 1;\n\n\tthis._newlineLength = this._newline.length;\n\tthis._newlineLastIndex = this._newlineLength - 1;\n\n\tthis._quoteLength = this._quote.length;\n\tthis._quoteLastIndex = this._quoteLength - 1;\n\n\tthis._skipLength = this._skip.length;\n\tthis._skipLastIndex = this._skipLength - 1;\n\n\t// Initialize the state flag:\n\tif ( this._skipRow && this._skipRow( 0, 0 ) ) {\n\t\tthis._state = SKIP;\n\t\tthis._skipped = true;\n\t} else {\n\t\tthis._state = INIT;\n\t}\n\t// Initialize state processors...\n\tthis._states = states( this ); // NOTE: this should come after all other initialization!\n\n\treturn this;\n}\n\n/**\n* Updates state by adding a processed character to an internal buffer.\n*\n* @private\n* @name _push\n* @memberof Parser.prototype\n* @type {Function}\n* @param {string} ch - character\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_push', function push( ch ) {\n\tvar buf = this._buffer;\n\n\t// Increment the internal buffer pointer:\n\tthis._cursor += 1;\n\n\t// Only expand the internal buffer if we've run out of previously allocated memory...\n\tif ( this._cursor >= buf.length ) {\n\t\tbuf.push( ch );\n\t\tdebug( 'Internal buffer size increased. Length: %d.', buf.length );\n\t} else {\n\t\t// Reuse existing memory:\n\t\tbuf[ this._cursor ] = ch;\n\t}\n\tdebug( 'Cursor: %d. Push: %s', this._cursor, ch );\n\treturn this;\n});\n\n/**\n* Rewinds the internal buffer cursor by a specified amount.\n*\n* @private\n* @name _rewind\n* @memberof Parser.prototype\n* @type {Function}\n* @param {NonNegativeInteger} N - number of elements to rewind\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_rewind', function rewind( N ) {\n\tthis._cursor -= N;\n\n\tdebug( 'Rewind: %d. Cursor: %d.', N, this._cursor );\n\treturn this;\n});\n\n/**\n* Copies a sequence of internal buffer elements to an earlier position in the buffer.\n*\n* @private\n* @name _copyWithin\n* @memberof Parser.prototype\n* @type {Function}\n* @param {NonNegativeInteger} target - starting position to which to copy elements\n* @param {NonNegativeInteger} start - staring index of the elements to copy (inclusive)\n* @param {NonNegativeInteger} N - number of elements to copy\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_copyWithin', function copyWithin( target, start, N ) {\n\tvar buf;\n\tvar i;\n\n\tbuf = this._buffer;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tbuf[ target+i ] = buf[ start+i ];\n\t}\n\treturn this;\n});\n\n/**\n* Returns the contents of a buffer slice.\n*\n* @private\n* @name _slice\n* @memberof Parser.prototype\n* @type {Function}\n* @param {NonNegativeInteger} start - starting character index (inclusive)\n* @param {NonNegativeInteger} end - ending character index (inclusive)\n* @returns {string} buffer contents\n*/\nsetReadOnly( Parser.prototype, '_slice', function slice( start, end ) {\n\treturn this._buffer.slice( start, end+1 ).join( '' );\n});\n\n/**\n* Checks whether the contents of a buffer slice consists of only whitespace.\n*\n* @private\n* @name _isWhitespace\n* @memberof Parser.prototype\n* @type {Function}\n* @param {NonNegativeInteger} start - starting character index (inclusive)\n* @param {NonNegativeInteger} end - ending character index (inclusive)\n* @returns {boolean} boolean indicating whether a buffer slice consists of only whitespace\n*/\nsetReadOnly( Parser.prototype, '_isWhitespace', function isWhitespace( start, end ) {\n\treturn ( replace( this._slice( start, end ), this._reWhitespaceLeft, '' ) === '' );\n});\n\n/**\n* Resets the parser.\n*\n* @private\n* @name _reset\n* @memberof Parser.prototype\n* @type {Function}\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_reset', function reset() {\n\t// Reset counters and indices:\n\tthis._col = 0;\n\tthis._cidx = 0;\n\tthis._qidx = -1;\n\tthis._eidx = -1;\n\n\t// Reset the parser state...\n\tif ( this._skipRow && this._skipRow( this._row, this._line ) ) {\n\t\tthis._state = SKIP;\n\t\tthis._skipped = true;\n\t} else {\n\t\tthis._state = INIT;\n\t\tthis._skipped = false;\n\t}\n\tthis._commented = false;\n\n\t// Reset the buffer:\n\tthis._cursor = -1;\n\n\tdebug( 'Parser reset.' );\n\treturn this;\n});\n\n/**\n* Sets a field value in an internal row buffer.\n*\n* @private\n* @name _set\n* @memberof Parser.prototype\n* @type {Function}\n* @param {*} value - field value\n* @param {NonNegativeInteger} idx - field index\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_setField', function set( value, idx ) {\n\tvar buf = this._rowBuffer;\n\n\t// FIXME: as buffer may be provided from userland, use `set` accessor and consider using `@stdlib/utils/push` to allow support of dynamically resizing fixed length buffers\n\n\t// Only expand the row buffer if we've run out of previously allocated memory...\n\tif ( idx >= buf.length ) {\n\t\tbuf.push( value );\n\t\tdebug( 'Row buffer size increased. Length: %d.', buf.length );\n\t} else {\n\t\t// Reuse existing memory:\n\t\tbuf[ idx ] = value;\n\t}\n\treturn this;\n});\n\n/**\n* Returns a field value.\n*\n* @private\n* @name _getField\n* @memberof Parser.prototype\n* @type {Function}\n* @param {NonNegativeInteger} start - starting character index (inclusive)\n* @param {NonNegativeInteger} end - ending character index (inclusive)\n* @returns {string} field value\n*/\nsetReadOnly( Parser.prototype, '_getField', function get( start, end ) {\n\tvar v = this._slice( start, end );\n\tif ( this._ltrim ) {\n\t\tif ( this._rtrim ) {\n\t\t\treturn replace( v, this._reWhitespace, '$1' );\n\t\t}\n\t\treturn replace( v, this._reWhitespaceLeft, '' );\n\t}\n\tif ( this._rtrim ) {\n\t\treturn replace( v, this._reWhitespaceRight, '' );\n\t}\n\treturn v;\n});\n\n/**\n* Returns the current row of values.\n*\n* @private\n* @name _getRow\n* @memberof Parser.prototype\n* @type {Function}\n* @returns {ArrayLikeObject} row of values\n*/\nsetReadOnly( Parser.prototype, '_getRow', function get() {\n\tif ( this._rowBufferFLG ) {\n\t\treturn this._rowBuffer;\n\t}\n\t// Return a shallow copy to avoid mutating internal state:\n\treturn this._rowBuffer.slice( 0, this._col );\n});\n\n/**\n* Scans the internal buffer for a specified character sequence.\n*\n* ## Notes\n*\n* -   Given an internal buffer\n*\n*     ```text\n*     | ... | a | b |\n*     ```\n*\n*     search character sequence\n*\n*     ```text\n*     | a | b | c |\n*     ```\n*\n*     and `N` equal to `2`, the method will begin scanning from the position of `a` in the internal buffer above and compare to each element of the first `N` characters of the search character sequence.\n*\n*     This method is intended to be used in scenarios where we already know that an incoming character matches the last character of the search sequence, and we want to know whether the rest of the search sequence matches the most recently added elements in the internal buffer.\n*\n* @private\n* @name _scan\n* @memberof Parser.prototype\n* @type {Function}\n* @param {StringArray} search - character sequence\n* @param {NonNegativeInteger} N - number of characters to search\n* @returns {boolean} boolean indicating whether a match was found\n*/\nsetReadOnly( Parser.prototype, '_scan', function scan( search, N ) {\n\tvar buf;\n\tvar idx;\n\tvar i;\n\n\tbuf = this._buffer;\n\tidx = this._cursor - N + 1;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( buf[ idx+i ] !== search[ i ] ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ( i === N );\n});\n\n/**\n* Processes a field.\n*\n* @private\n* @name _onField\n* @memberof Parser.prototype\n* @type {Function}\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_onField', function onField() {\n\t// Extract the field value:\n\tvar v = this._getField( this._cidx, this._cursor );\n\n\t// Insert the field value into the row buffer:\n\tthis._setField( v, this._col );\n\n\t// Invoke a callback for receiving field values:\n\tthis._onColumn( v, this._row, this._col, this._line );\n\tdebug( 'Field. Line: %d. Row: %d. Column: %d. Value: %s', this._line, this._row, this._col, v );\n\n\t// Increment the field counter to record that we've moved on to the next field:\n\tthis._col += 1;\n\n\t// Increment the index marking the beginning of the next field:\n\tthis._cidx = this._cursor + 1; // +1 as the cursor currently points to the last character in the current field, and, thus, the next field should start at the next index\n\n\t// Reset indices:\n\tthis._qidx = -1;\n\tthis._eidx = -1;\n\n\treturn this;\n});\n\n/**\n* Processes a record.\n*\n* @private\n* @name _onRecord\n* @memberof Parser.prototype\n* @type {Function}\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_onRecord', function onRecord() {\n\tvar v;\n\n\t// Extract the field value:\n\tv = this._getField( this._cidx, this._cursor );\n\n\t// Check for a blank row (i.e., a row consisting only of whitespace):\n\tif ( this._skipBlankRows && this._col === 0 ) {\n\t\tif ( v === '' || replace( v, this._reWhitespaceLeft, '' ) === '' ) {\n\t\t\treturn this._onSkippedRow();\n\t\t}\n\t}\n\t// Insert the field value into the row buffer:\n\tthis._setField( v, this._col );\n\n\t// Invoke a callback for receiving field values:\n\tthis._onColumn( v, this._row, this._col, this._line );\n\tthis._col += 1;\n\n\t// Invoke a callback for receiving rows:\n\tthis._onRow( this._getRow(), this._row, this._col, this._line );\n\tdebug( 'Record. Line: %d. Fields: %d.', this._line, this._col );\n\n\t// Increment row and line counters to indicate that we've moved on to the next row/line:\n\tthis._row += 1;\n\tthis._line += 1;\n\n\t// Reset the parser:\n\tthis._reset();\n\n\t// Check whether we have processed a desired number of rows...\n\tif ( this._row >= this._maxRows ) {\n\t\tthis._changeState( CLOSED );\n\t}\n\treturn this;\n});\n\n/**\n* Processes a commented row.\n*\n* @private\n* @name _onCommentedRow\n* @memberof Parser.prototype\n* @type {Function}\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_onCommentedRow', function onCommentedRow() {\n\tvar v;\n\n\t// Invoke a callback for receiving commented lines:\n\tif ( this._onComment ) {\n\t\tv = this._slice( 0, this._cursor );\n\t\tif ( this._trimComment ) {\n\t\t\tv = replace( v, this._reWhitespaceLeft, '' );\n\t\t}\n\t\tthis._onComment( v, this._line );\n\t\tdebug( 'Comment. Line: %d. Value: %s', this._line, v );\n\t} else {\n\t\tdebug( 'Comment. Line: %d.', this._line );\n\t}\n\t// Increment the counter for how many lines have been processed:\n\tthis._line += 1;\n\n\t// Reset the parser:\n\tthis._reset();\n\n\treturn this;\n});\n\n/**\n* Processes a skipped row.\n*\n* @private\n* @name _onSkippedRow\n* @memberof Parser.prototype\n* @type {Function}\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_onSkippedRow', function onSkippedRow() {\n\tvar v;\n\n\t// Invoke a callback for receiving skipped lines:\n\tif ( this._onSkip ) {\n\t\tv = this._slice( 0, this._cursor );\n\t\tthis._onSkip( v, this._line );\n\t\tdebug( 'Skipped row. Line: %d. Value: %s', this._line, v );\n\t} else {\n\t\tdebug( 'Skipped row. Line: %d.', this._line );\n\t}\n\t// Increment the counter for how many lines have been processed:\n\tthis._line += 1;\n\n\t// Reset the parser:\n\tthis._reset();\n\n\treturn this;\n});\n\n/**\n* Processes a closing quote sequence.\n*\n* @private\n* @name _onClosingQuote\n* @memberof Parser.prototype\n* @type {Function}\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_onClosingQuote', function onClosingQuote() {\n\t// Cache the cursor position marking the end of the closing quote sequence:\n\tthis._qidx = this._cursor;\n\treturn this;\n});\n\n/**\n* Processes an escape sequence.\n*\n* @private\n* @name _onEscape\n* @memberof Parser.prototype\n* @type {Function}\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_onEscape', function onEscape() {\n\t// Cache the cursor position marking the end of the escape sequence:\n\tthis._eidx = this._cursor;\n\treturn this;\n});\n\n/**\n* Creates a parser exception.\n*\n* @private\n* @name _createException\n* @memberof Parser.prototype\n* @type {Function}\n* @param {string} name - exception name\n* @returns {Error} parser exception\n*/\nsetReadOnly( Parser.prototype, '_createException', function createException( name ) {\n\tvar err;\n\n\tswitch ( name ) {\n\tcase 'INVALID_CLOSING_QUOTE':\n\t\terr = new Error( format( 'unexpected error. Encountered an invalid record. Field %d on line %d contains a closing quote which is not immediately followed by a delimiter or newline.', this._col, this._line ) );\n\t\tbreak;\n\tcase 'INVALID_OPENING_QUOTE':\n\t\terr = new Error( format( 'unexpected error. Encountered an invalid record. Field %d on line %d contains an opening quote which does not immediately follow a delimiter or newline.', this._col, this._line ) );\n\t\tbreak;\n\tcase 'INVALID_ESCAPE':\n\t\terr = new Error( format( 'unexpected error. Encountered an invalid record. Field %d on line %d contains an escape sequence which is not immediately followed by a special character sequence.', this._col, this._line ) );\n\t\tbreak;\n\tcase 'INVALID_QUOTED_ESCAPE':\n\t\terr = new Error( format( 'unexpected error. Encountered an invalid record. Field %d on line %d contains an escape sequence within a quoted field which is not immediately followed by a quote sequence.', this._col, this._line ) );\n\t\tbreak;\n\tcase 'CLOSED':\n\t\terr = new Error( 'invalid operation. Parser is unable to parse new chunks, as the parser has been closed. To parse new chunks, create a new parser instance.' );\n\t\tbreak;\n\tdefault:\n\t\terr = new Error( 'invalid operation. Parser is in an unrecoverable error state. To parse new chunks, create a new parser instance.' );\n\t\tbreak;\n\t}\n\treturn err;\n});\n\n/**\n* Raises a parser warning.\n*\n* @private\n* @name _raiseWarning\n* @memberof Parser.prototype\n* @type {Function}\n* @param {string} name - exception name\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_raiseWarning', function raiseWarning( name ) {\n\tvar err;\n\n\tif ( this._onWarn ) {\n\t\terr = this._createException( name );\n\n\t\tdebug( 'Warning: %s', err.message );\n\t\tthis._onWarn( err );\n\t}\n\treturn this;\n});\n\n/**\n* Raises a parser exception.\n*\n* @private\n* @name _raiseException\n* @memberof Parser.prototype\n* @type {Function}\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_raiseException', function raiseException() {\n\tvar err = this._createException( this._errname );\n\n\tdebug( 'Error: %s', err.message );\n\tthis._onError( err );\n\n\treturn this;\n});\n\n/**\n* Updates the parser state.\n*\n* @private\n* @name _changeState\n* @memberof Parser.prototype\n* @type {Function}\n* @param {NonNegativeInteger} state - state enumeration constant\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_changeState', function changeState( state ) {\n\tdebug( 'State transition: %s -> %s.', enum2state[ this._state ], enum2state[ state ] );\n\n\tswitch ( state ) { // eslint-disable-line default-case\n\tcase CLOSED:\n\t\tthis._close();\n\t\tbreak;\n\tcase COMMENT:\n\t\tthis._commented = true;\n\t\tbreak;\n\tcase ERROR:\n\t\tthis._raiseException();\n\t\tbreak;\n\tcase ESCAPE:\n\t\tthis._onEscape();\n\t\tbreak;\n\tcase FIELD:\n\t\tif ( this._state !== ESCAPE ) {\n\t\t\tthis._onField();\n\t\t}\n\t\tbreak;\n\tcase INIT:\n\t\tif ( this._commented ) {\n\t\t\tthis._onCommentedRow();\n\t\t} else if ( this._skipped ) {\n\t\t\tthis._onSkippedRow();\n\t\t} else {\n\t\t\tthis._onRecord();\n\t\t}\n\t\tbreak;\n\tcase INVALID_QUOTE_END:\n\t\tbreak;\n\tcase QUOTE_END:\n\t\tthis._onClosingQuote();\n\t\tbreak;\n\tcase QUOTED_ESCAPE:\n\t\tthis._onEscape();\n\t\tbreak;\n\tcase QUOTED_FIELD:\n\t\tbreak;\n\tcase SKIP:\n\t\tthis._skipped = true;\n\t\tbreak;\n\tcase SKIPPED_COMMENT:\n\tcase SKIPPED_ESCAPE:\n\tcase SKIPPED_FIELD:\n\tcase SKIPPED_INVALID_QUOTE_END:\n\tcase SKIPPED_QUOTE_END:\n\tcase SKIPPED_QUOTED_ESCAPE:\n\tcase SKIPPED_QUOTED_FIELD:\n\t\tbreak;\n\t}\n\tthis._state = state;\n\treturn this;\n});\n\n/**\n* Sets the parser's error state.\n*\n* @private\n* @name _setErrorState\n* @memberof Parser.prototype\n* @type {Function}\n* @param {string} name - error name\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_setErrorState', function setErrorState( name ) {\n\tif ( name ) {\n\t\tdebug( 'Error: %s.', name );\n\t} else {\n\t\tdebug( 'Reset error state.' );\n\t}\n\tthis._errname = name;\n\treturn this;\n});\n\n/**\n* Closes the parser.\n*\n* @private\n* @name _close\n* @memberof Parser.prototype\n* @type {Function}\n* @returns {Parser} parser instance\n*/\nsetReadOnly( Parser.prototype, '_close', function close() {\n\tvar state;\n\tvar v;\n\n\tif ( this.done ) {\n\t\tthis._setErrorState( CLOSED )._changeState( ERROR );\n\t\treturn this;\n\t}\n\tif ( this._cursor >= 0 ) {\n\t\tstate = this._state;\n\t\tif ( state === INIT || state === FIELD || state === QUOTE_END ) {\n\t\t\t// If the current state is \"field\" or \"quote end\", we're in a valid state and can simply transition to our initial state to indicate that we've processed a record:\n\t\t\tthis._changeState( INIT )._onClose();\n\t\t} else {\n\t\t\t// Check if we were able to process part of a row...\n\t\t\tif ( this._col ) {\n\t\t\t\t// This may be an incomplete row!!!\n\t\t\t\tthis._onRow( this._getRow(), this._row, this._col );\n\t\t\t}\n\t\t\t// Extract however much of the current field we were able to process:\n\t\t\tv = this._slice( this._cidx, this._cursor );\n\n\t\t\t// Return the unfinished field to the client (although this may not be equal to the original character sequence, as escape sequences may have already been stripped!):\n\t\t\tdebug( 'Flush: %s', v );\n\t\t\tthis._onClose( v );\n\t\t}\n\t} else {\n\t\tthis._onClose();\n\t}\n\tdebug( 'Closed.' );\n\treturn this;\n});\n\n/**\n* Parses the next chunk.\n*\n* @name next\n* @memberof Parser.prototype\n* @type {Function}\n* @param {string} chunk - chunk\n* @throws {Error} unable to parse new chunks\n* @throws {Error} invalid field\n* @throws {Error} invalid record\n* @returns {Parser} parser instance\n*\n* @example\n* var parser = new Parser();\n*\n* // ...\n*\n* parser.next( '1,2,3,4\\n' );\n*\n* // ...\n*\n* parser.next( '5,6,7,8\\n' );\n*\n* // ...\n*\n* parser.next( '9,10,11,12\\n' );\n*/\nsetReadOnly( Parser.prototype, 'next', function next( chunk ) {\n\tvar states;\n\tvar i;\n\n\tdebug( 'Chunk: %s', chunk );\n\n\tif ( this.done ) {\n\t\tthis._setErrorState( CLOSED )._changeState( ERROR );\n\t\treturn this;\n\t}\n\tstates = this._states;\n\tfor ( i = 0; i < chunk.length; i++ ) {\n\t\tstates[ this._state ]( chunk[ i ] );\n\t\tif ( this._state === CLOSED || this._state === ERROR ) {\n\t\t\treturn this;\n\t\t}\n\t}\n\treturn this;\n});\n\n/**\n* Closes the parser.\n*\n* @name close\n* @memberof Parser.prototype\n* @type {Function}\n* @returns {Parser} parser instance\n*\n* @example\n* var parser = new Parser();\n*\n* // ...\n*\n* parser.next( '1,2,3,4\\n' );\n*\n* // ...\n*\n* parser.next( '5,6,7,8\\n' );\n*\n* // ...\n*\n* parser.next( '9,10,11,12\\n' );\n*\n* // ...\n*\n* parser.close();\n*/\nsetReadOnly( Parser.prototype, 'close', function close() {\n\tif ( this.done ) {\n\t\treturn this;\n\t}\n\tthis._changeState( CLOSED );\n\treturn this;\n});\n\n/**\n* Boolean indicating whether a parser is able to process new chunks.\n*\n* @name done\n* @memberof Parser.prototype\n* @readonly\n* @type {boolean}\n*\n* @example\n* var parser = new Parser();\n*\n* // ...\n*\n* parser.next( '1,2,3,4\\n' );\n*\n* // ...\n*\n* parser.next( '5,6,7,8\\n' );\n*\n* // ...\n*\n* parser.next( '9,10,11,12\\n' );\n*\n* // ...\n*\n* parser.close();\n*\n* // ...\n*\n* var bool = parser.done;\n* // returns true\n*/\nsetReadOnlyAccessor( Parser.prototype, 'done', function get() {\n\treturn ( this._state === CLOSED ) || ( this._state === ERROR );\n});\n\n\n// EXPORTS //\n\nmodule.exports = Parser;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Incremental parser for delimiter-separated values.\n*\n* @module @stdlib/utils-dsv-base-parse\n*\n* @example\n* var Parser = require( '@stdlib/utils-dsv-base-parse' );\n*\n* var parser = new Parser();\n*\n* // ...\n*\n* parser.next( '1,2,3,4\\n' );\n*\n* // ...\n*\n* parser.next( '5,6,7,8\\n' );\n*\n* // ...\n*\n* parser.next( '9,10,11,12\\n' );\n*\n* // ...\n*\n* parser.close();\n*\n* // ...\n*\n* var bool = parser.done;\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "noop", "throwError", "err", "defaults", "require_enum2state", "__commonJSMin", "exports", "module", "require_state2enum", "__commonJSMin", "exports", "module", "enum2state", "table", "out", "i", "state2enum", "require_closed", "__commonJSMin", "exports", "module", "state2enum", "CLOSED", "processor", "parser", "next", "require_comment", "__commonJSMin", "exports", "module", "logger", "state2enum", "debug", "INIT", "processor", "parser", "newlineLastIndex", "newline", "next", "ch", "require_error", "__commonJSMin", "exports", "module", "state2enum", "ERROR", "processor", "parser", "next", "require_max", "__commonJSMin", "exports", "module", "max", "x", "y", "require_escape", "__commonJSMin", "exports", "module", "logger", "maximum", "state2enum", "debug", "ERROR", "FIELD", "processor", "parser", "delimiterLastIndex", "newlineLastIndex", "commentLastIndex", "escapeLastIndex", "skipLastIndex", "escapeLength", "delimiter", "newline", "comment", "escape", "strict", "skip", "max", "next", "ch", "cursor", "idx", "d", "require_field", "__commonJSMin", "exports", "module", "logger", "state2enum", "debug", "ESCAPE", "FIELD", "INIT", "QUOTED_FIELD", "processor", "parser", "delimiterLastIndex", "newlineLastIndex", "escapeLastIndex", "quoteLastIndex", "delimiter", "newline", "quoting", "escape", "strict", "quote", "next", "ch", "idx", "require_init", "__commonJSMin", "exports", "module", "logger", "state2enum", "debug", "COMMENT", "FIELD", "ESCAPE", "INIT", "QUOTED_FIELD", "SKIP", "processor", "parser", "delimiterLastIndex", "newlineLastIndex", "commentLastIndex", "escapeLastIndex", "quoteLastIndex", "skipLastIndex", "delimiter", "newline", "comment", "quoting", "escape", "strict", "quote", "skip", "next", "ch", "idx", "require_invalid_quote_end", "__commonJSMin", "exports", "module", "logger", "state2enum", "debug", "ERROR", "FIELD", "INIT", "removeWhitespace", "parser", "state", "processor", "delimiterLastIndex", "newlineLastIndex", "delimiter", "newline", "next", "ch", "require_quote_end", "__commonJSMin", "exports", "module", "logger", "maximum", "state2enum", "debug", "ERROR", "FIELD", "INIT", "INVALID_QUOTE_END", "QUOTED_FIELD", "processor", "parser", "delimiterLastIndex", "newlineLastIndex", "quoteLastIndex", "doublequote", "delimiter", "newline", "strict", "quote", "max", "next", "ch", "require_quoted_escape", "__commonJSMin", "exports", "module", "logger", "state2enum", "debug", "ERROR", "QUOTED_FIELD", "processor", "parser", "escapeLastIndex", "quoteLastIndex", "escapeLength", "strict", "quote", "next", "ch", "cursor", "idx", "d", "require_quoted_field", "__commonJSMin", "exports", "module", "logger", "state2enum", "debug", "QUOTE_END", "QUOTED_ESCAPE", "processor", "parser", "escapeLastIndex", "quoteLastIndex", "doublequote", "escape", "quote", "next", "ch", "require_skip", "__commonJSMin", "exports", "module", "logger", "state2enum", "debug", "INIT", "SKIP", "SKIPPED_COMMENT", "SKIPPED_FIELD", "SKIPPED_ESCAPE", "SKIPPED_QUOTED_FIELD", "processor", "parser", "delimiterLastIndex", "newlineLastIndex", "commentLastIndex", "escapeLastIndex", "quoteLastIndex", "skipLastIndex", "delimiter", "newline", "comment", "quoting", "escape", "strict", "quote", "skip", "next", "ch", "idx", "require_skipped_comment", "__commonJSMin", "exports", "module", "logger", "state2enum", "debug", "INIT", "processor", "parser", "newlineLastIndex", "newline", "next", "ch", "require_skipped_escape", "__commonJSMin", "exports", "module", "logger", "maximum", "state2enum", "debug", "SKIPPED_FIELD", "processor", "parser", "delimiterLastIndex", "newlineLastIndex", "commentLastIndex", "escapeLastIndex", "skipLastIndex", "delimiter", "newline", "comment", "escape", "skip", "max", "next", "ch", "cursor", "idx", "d", "require_skipped_field", "__commonJSMin", "exports", "module", "logger", "state2enum", "debug", "INIT", "SKIPPED_ESCAPE", "SKIPPED_FIELD", "SKIPPED_QUOTED_FIELD", "processor", "parser", "delimiterLastIndex", "newlineLastIndex", "escapeLastIndex", "quoteLastIndex", "delimiter", "newline", "quoting", "escape", "strict", "quote", "next", "ch", "idx", "require_skipped_invalid_quote_end", "__commonJSMin", "exports", "module", "logger", "state2enum", "debug", "SKIPPED_FIELD", "INIT", "processor", "parser", "delimiterLastIndex", "newlineLastIndex", "delimiter", "newline", "next", "ch", "require_skipped_quote_end", "__commonJSMin", "exports", "module", "logger", "maximum", "state2enum", "debug", "INIT", "SKIPPED_FIELD", "SKIPPED_INVALID_QUOTE_END", "SKIPPED_QUOTED_FIELD", "processor", "parser", "delimiterLastIndex", "newlineLastIndex", "quoteLastIndex", "doublequote", "delimiter", "newline", "quote", "max", "next", "ch", "require_skipped_quoted_escape", "__commonJSMin", "exports", "module", "logger", "state2enum", "debug", "SKIPPED_QUOTED_FIELD", "processor", "parser", "quoteLastIndex", "quote", "next", "ch", "cursor", "idx", "d", "require_skipped_quoted_field", "__commonJSMin", "exports", "module", "logger", "state2enum", "debug", "SKIPPED_QUOTE_END", "SKIPPED_QUOTED_ESCAPE", "processor", "parser", "escapeLastIndex", "quoteLastIndex", "doublequote", "escape", "quote", "next", "ch", "require_states", "__commonJSMin", "exports", "module", "enum2state", "closed", "comment", "error", "escape", "field", "init", "invalidQuoteEnd", "quoteEnd", "quotedEscape", "quotedField", "skip", "skippedComment", "skippedEscape", "skippedField", "skippedInvalidQuoteEnd", "skippedQuoteEnd", "skippedQuotedEscape", "skippedQuotedField", "table", "states", "parser", "out", "require_main", "__commonJSMin", "exports", "module", "logger", "setReadOnly", "setReadOnlyAccessor", "Boolean", "format", "rescape", "replace", "defaults", "state2enum", "enum2state", "states", "debug", "CLOSED", "COMMENT", "ERROR", "ESCAPE", "FIELD", "INIT", "INVALID_QUOTE_END", "QUOTE_END", "QUOTED_ESCAPE", "QUOTED_FIELD", "SKIP", "SKIPPED_COMMENT", "SKIPPED_ESCAPE", "SKIPPED_FIELD", "SKIPPED_INVALID_QUOTE_END", "SKIPPED_QUOTE_END", "SKIPPED_QUOTED_ESCAPE", "SKIPPED_QUOTED_FIELD", "array2pattern", "list", "pattern", "Parser", "options", "opts", "ch", "buf", "N", "target", "start", "i", "end", "value", "idx", "v", "search", "name", "err", "state", "chunk", "main"]
}
